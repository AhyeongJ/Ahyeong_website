[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "LS_lec3.html",
    "href": "LS_lec3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "LS_lec3_web.html",
    "href": "LS_lec3_web.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "href": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "href": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "",
    "text": "df[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "href": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q1. mpg데이터를 불러와 복사본을 만드세요.",
    "text": "Q1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()"
  },
  {
    "objectID": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "href": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "title": "hw1",
    "section": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요",
    "text": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB"
  },
  {
    "objectID": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "href": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "title": "hw1",
    "section": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.",
    "text": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB"
  },
  {
    "objectID": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "href": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "title": "hw1",
    "section": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.",
    "text": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                          'popasian' : 'asian'})"
  },
  {
    "objectID": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()"
  },
  {
    "objectID": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "href": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "title": "hw1",
    "section": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.",
    "text": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "href": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "title": "hw1",
    "section": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.",
    "text": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  }
]