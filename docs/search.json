[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nvar1\nvar2 = [4, 5, 6]\nvar2 \nvar1 + var2\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\na + b\na + ' ' + b\n# 문자는 문자끼리만 더할 수 있음. \n\n'안녕하세요! LS 빅데이터 스쿨!'\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nnum1 + num2 \n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nnum1 &lt; num2 \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nTrue * False #0\nFalse * False #0\n\n1\n\n\n0\n\n\n\n\nor 연산자\n\nTrue or True\nTrue or False\nFalse or True\nFalse or False\n\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\na or b\nmin(a + b , 1) #수식, 0일 때 제외하고 모든 결과 1 \n\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nstr1 * (-2) #error 안 뜲 '' \nstr1 * 0  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n''\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\n'pip'��(��) ���� �Ǵ� �ܺ� ����, ������ �� �ִ� ���α׷�, �Ǵ�\n��ġ ������ �ƴմϴ�.\n'pip'��(��) ���� �Ǵ� �ܺ� ����, ������ �� �ִ� ���α׷�, �Ǵ�\n��ġ ������ �ƴմϴ�.\n'pip'��(��) ���� �Ǵ� �ܺ� ����, ������ �� �ִ� ���α׷�, �Ǵ�\n��ġ ������ �ƴմϴ�."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "LS_lec3.html",
    "href": "LS_lec3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  }
]