[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ahyeong Website",
    "section": "",
    "text": ":::{#hero-heading}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "LS_lec3.html",
    "href": "LS_lec3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "LS_lec3_web.html",
    "href": "LS_lec3_web.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "href": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "href": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "",
    "text": "df[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "href": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q1. mpg데이터를 불러와 복사본을 만드세요.",
    "text": "Q1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()"
  },
  {
    "objectID": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "href": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "title": "hw1",
    "section": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요",
    "text": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB"
  },
  {
    "objectID": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "href": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "title": "hw1",
    "section": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.",
    "text": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB"
  },
  {
    "objectID": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "href": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "title": "hw1",
    "section": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.",
    "text": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                          'popasian' : 'asian'})"
  },
  {
    "objectID": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()"
  },
  {
    "objectID": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "href": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "title": "hw1",
    "section": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.",
    "text": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "href": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "title": "hw1",
    "section": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.",
    "text": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "hw1.html#p.84-혼자서-해보기",
    "href": "hw1.html#p.84-혼자서-해보기",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#p.115-혼자서-해보기",
    "href": "hw1.html#p.115-혼자서-해보기",
    "title": "hw1",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#p.130",
    "href": "hw1.html#p.130",
    "title": "hw1",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "note 3.html",
    "href": "note 3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "presentation1 _traditional.html",
    "href": "presentation1 _traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "hw2.html#p.144",
    "href": "hw2.html#p.144",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "hw2.html#p.153",
    "href": "hw2.html#p.153",
    "title": "hw2",
    "section": "p.153",
    "text": "p.153\n\nQ1. audi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자\naudi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#p.158",
    "href": "hw2.html#p.158",
    "title": "hw2",
    "section": "p.158",
    "text": "p.158\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자.\n\n\n데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "hw2.html#p.166",
    "href": "hw2.html#p.166",
    "title": "hw2",
    "section": "P.166",
    "text": "P.166\n\nQ1.\n\n\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수\n\n\n어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n\n\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다.\n\n\n어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n\n\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다.\n\n\nhwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n\n\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다.\n\n\n회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "hw2.html#p.150",
    "href": "hw2.html#p.150",
    "title": "hw2",
    "section": "p.150",
    "text": "p.150\n\nQ1. mpg 데이터 중 일부만 추출해 분석에 활용하자.\n\n\nmpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라.\n\n\n새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2. 자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다.\n\n\n앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "presentation1_traditional.html",
    "href": "presentation1_traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS Bigdata School Homework 1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/index.html#p.84-혼자서-해보기",
    "href": "posts/hw1/index.html#p.84-혼자서-해보기",
    "title": "LS Bigdata School Homework 1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/index.html#p.115-혼자서-해보기",
    "href": "posts/hw1/index.html#p.115-혼자서-해보기",
    "title": "LS Bigdata School Homework 1",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#p.130",
    "href": "posts/hw1/index.html#p.130",
    "title": "LS Bigdata School Homework 1",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nplt.clf()\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "study",
    "section": "",
    "text": "Hypothesis\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\nAug 5, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nConvinience Level Practice\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch8\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch9\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nNormal Distribution Practice\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nSample Variance\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nISLP Lab: Introduction to Python\n\n\n\n\n\n\nISLP\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Ch11. 지도시각화\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch8\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch. Plotly를 이용한 인터렉티브 그래프\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch4&5\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch6\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch7\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nLS Bigdata School note 1\n\n\n\n\n\n\nnote\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nLS Bigdata School Presentation 1\n\n\n\n\n\n\npresentation\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS Bigdata School Homework 2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/index.html#p.144",
    "href": "posts/hw2/index.html#p.144",
    "title": "LS Bigdata School Homework 2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/index.html#p.150",
    "href": "posts/hw2/index.html#p.150",
    "title": "LS Bigdata School Homework 2",
    "section": "p.150",
    "text": "p.150\n\nQ1. mpg 데이터 중 일부만 추출해 분석에 활용하자.\n\n\nmpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라.\n\n\n새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2. 자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다.\n\n\n앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "posts/hw2/index.html#p.153",
    "href": "posts/hw2/index.html#p.153",
    "title": "LS Bigdata School Homework 2",
    "section": "p.153",
    "text": "p.153\n\nQ1. audi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자\naudi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#p.158",
    "href": "posts/hw2/index.html#p.158",
    "title": "LS Bigdata School Homework 2",
    "section": "p.158",
    "text": "p.158\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자.\n\n\n데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "posts/hw2/index.html#p.166",
    "href": "posts/hw2/index.html#p.166",
    "title": "LS Bigdata School Homework 2",
    "section": "P.166",
    "text": "P.166\n\nQ1.\n\n\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수\n\n\n어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n\n\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다.\n\n\n어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n\n\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다.\n\n\nhwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n\n\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다.\n\n\n회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "posts/note/index.html",
    "href": "posts/note/index.html",
    "title": "LS Bigdata School note 1",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "posts/presentation/index.html",
    "href": "posts/presentation/index.html",
    "title": "LS Bigdata School Presentation 1",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw1/hw1.html",
    "href": "posts/hw1/hw1.html",
    "title": "EasyPython Practice Ch4&5",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.84-혼자서-해보기",
    "href": "posts/hw1/hw1.html#p.84-혼자서-해보기",
    "title": "EasyPython Practice Ch4&5",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.115-혼자서-해보기",
    "href": "posts/hw1/hw1.html#p.115-혼자서-해보기",
    "title": "EasyPython Practice Ch4&5",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.130",
    "href": "posts/hw1/hw1.html#p.130",
    "title": "EasyPython Practice Ch4&5",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nplt.clf()\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/note/note.html",
    "href": "posts/note/note.html",
    "title": "LS Bigdata School note 1",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "posts/hw2/hw2.html",
    "href": "posts/hw2/hw2.html",
    "title": "EasyPython Practice Ch6",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보자 displ이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy 평균이 더 높은지 알아보세요\n\nimport pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보자. audi와 toyota 중 어느 manufacturer의 cty 평균이 더 높은지 알아보세요\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\nchevrolet, ford, honda 자동차의 고속도로 연비 평균을 알아보자. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해보세요.\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.144",
    "href": "posts/hw2/hw2.html#p.144",
    "title": "EasyPython Practice Ch6",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보자 displ이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy 평균이 더 높은지 알아보세요\n\nimport pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보자. audi와 toyota 중 어느 manufacturer의 cty 평균이 더 높은지 알아보세요\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\nchevrolet, ford, honda 자동차의 고속도로 연비 평균을 알아보자. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해보세요.\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.150",
    "href": "posts/hw2/hw2.html#p.150",
    "title": "EasyPython Practice Ch6",
    "section": "p.150",
    "text": "p.150\n\nQ1.\nmpg 데이터 중 일부만 추출해 분석에 활용하자. mpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라. 새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2.\n자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다. 앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.153",
    "href": "posts/hw2/hw2.html#p.153",
    "title": "EasyPython Practice Ch6",
    "section": "p.153",
    "text": "p.153\n\nQ1.\naudi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자 audi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.158",
    "href": "posts/hw2/hw2.html#p.158",
    "title": "EasyPython Practice Ch6",
    "section": "p.158",
    "text": "p.158\n\nQ1.\nmpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2.\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3.\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4.\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자. 데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.166",
    "href": "posts/hw2/hw2.html#p.166",
    "title": "EasyPython Practice Ch6",
    "section": "P.166",
    "text": "P.166\n\nQ1.\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수 어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다. 어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다. hwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다. 회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "posts/presentation/presentation.html",
    "href": "posts/presentation/presentation.html",
    "title": "LS Bigdata School Presentation 1",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.173",
    "href": "posts/hw2/hw2.html#p.173",
    "title": "EasyPython Practice Ch6",
    "section": "p.173",
    "text": "p.173\n문제 준비\n\nfuel = pd.DataFrame({'fl'       : ['c', 'd', 'e', 'p', 'r'],\n                     'price_fl' : [2.35, 2.38, 2.11, 2.76, 2.22]})\nfuel\n\n\n\n\n\n\n\n\nfl\nprice_fl\n\n\n\n\n0\nc\n2.35\n\n\n1\nd\n2.38\n\n\n2\ne\n2.11\n\n\n3\np\n2.76\n\n\n4\nr\n2.22\n\n\n\n\n\n\n\n\nQ1.\nmpg 데이터에는 연료 종류를 나타낸 f1 변수는 있지만 연료 가격을 나타낸 변수는 없다. 앞에서 만든 fuel데이터를 이용해 mpg 데이터에 price_f1 변수를 추가하라.\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv\")\nmpg = mpg.merge(fuel, how = \"left\", on = \"fl\")\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nprice_fl\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n2.76\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n2.76\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n2.76\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n2.76\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n2.76\n\n\n\n\n\n\n\n\n\nQ2.\n연료 가격 변수가 잘 추가됐는지 확인하기 위해 model, fl, price_fl 변수를 추출해 앞부분 5행을 출력하라.\n\nmpg[['model', 'fl', 'price_fl']].head()\n\n\n\n\n\n\n\n\nmodel\nfl\nprice_fl\n\n\n\n\n0\na4\np\n2.76\n\n\n1\na4\np\n2.76\n\n\n2\na4\np\n2.76\n\n\n3\na4\np\n2.76\n\n\n4\na4\np\n2.76"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.176",
    "href": "posts/hw2/hw2.html#p.176",
    "title": "EasyPython Practice Ch6",
    "section": "p.176",
    "text": "p.176\n\n준비하기\n\nimport pandas as pd\nimport numpy as np\nmidwest = pd.read_csv(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/midwest.csv\")\n\n\n\nQ1\npopadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다. midwest 데이터에 ‘전체 인구 대비 미성년 인구 백분율’ 변수를 추가하세요.\n\nmidwest['nonadult_ratio'] = (midwest['poptotal'] - midwest['popadults']) / midwest['poptotal'] * 100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nnonadult_ratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n34.486307\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n36.721250\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n35.501301\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n37.440758\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n31.819740\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n\nQ2.\n미성년 인구 백분율이 가장 높은 상위 5개 county의 미성년 인구 백분율을 출력하라.\n\nmidwest.sort_values('nonadult_ratio',ascending = False) \\\n       .head() \\\n       [['county', 'nonadult_ratio']]\n\n\n\n\n\n\n\n\ncounty\nnonadult_ratio\n\n\n\n\n230\nISABELLA\n51.501172\n\n\n404\nMENOMINEE\n50.591260\n\n\n281\nATHENS\n49.320727\n\n\n247\nMECOSTA\n49.059183\n\n\n154\nMONROE\n47.358182\n\n\n\n\n\n\n\n\n\nQ3.\n분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보자.\n\nmidwest['grade'] = np.where(midwest['nonadult_ratio'] &gt;= 40, 'large',\n                   np.where(midwest['nonadult_ratio'] &gt;= 30, 'middle', 'small'))\nmidwest.groupby('grade', as_index = False) \\\n       .agg(n = ('grade', 'count'))\n\n\n\n\n\n\n\n\ngrade\nn\n\n\n\n\n0\nlarge\n32\n\n\n1\nmiddle\n396\n\n\n2\nsmall\n9\n\n\n\n\n\n\n\n\n\nQ4.\npopasian은 해당 지역의 아시아인 인구를 나타냅니다. ‘전체 인구 대비 아시아인 인구 백분율’ 변수를 추가하고 하위 10개의 지역의 state, county, 아시아인 인구 백분율을 출력하라.\n\nmidwest['asian_ratio'] = midwest['popasian'] / midwest['poptotal'] * 100\nmidwest.sort_values('asian_ratio') \\\n       [['state', 'county', 'asian_ratio']] \\\n       .head(10)\n\n\n\n\n\n\n\n\nstate\ncounty\nasian_ratio\n\n\n\n\n404\nWI\nMENOMINEE\n0.000000\n\n\n105\nIN\nBENTON\n0.010592\n\n\n109\nIN\nCARROLL\n0.015950\n\n\n358\nOH\nVINTON\n0.027032\n\n\n390\nWI\nIRON\n0.032504\n\n\n85\nIL\nSCOTT\n0.053154\n\n\n112\nIN\nCLAY\n0.060716\n\n\n261\nMI\nOSCODA\n0.063759\n\n\n340\nOH\nPERRY\n0.066546\n\n\n73\nIL\nPIATT\n0.070749"
  },
  {
    "objectID": "posts/hw3/hw3.html",
    "href": "posts/hw3/hw3.html",
    "title": "EasyPython Practice Ch7",
    "section": "",
    "text": "문제 준비하기\n\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/mpg.csv\")\n\n#NaN 할당하기\nmpg.loc[[64, 123, 130, 152, 211], 'hwy'] = np.nan\n\n\n\ndrv 별로 hwy 평균이 어떻게 다른지 알아보려고 한다. 분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 한다. drv 변수와 hwy 변수에 결측치가 몇 개 있는 지 알아보자.\n\nmpg[['drv', 'hwy']].isna().sum()\n\ndrv    0\nhwy    5\ndtype: int64\n\n\n\n\n\ndf.dropna()를 이용해 hwy 변수의 결측치를 제거하고, 어떤 구동 방식의 hwy 평균이 높은지 알아봐. 하나의 pandas 구문으로 만들어야 한다.\n\nmpg.dropna(subset = 'hwy') \\\n   .groupby('drv', as_index = False) \\\n   .agg(mean = ('hwy', 'mean'))\n\n\n\n\n\n\n\n\ndrv\nmean\n\n\n\n\n0\n4\n19.242424\n\n\n1\nf\n28.200000\n\n\n2\nr\n21.000000"
  },
  {
    "objectID": "posts/hw3/hw3.html#p.-185",
    "href": "posts/hw3/hw3.html#p.-185",
    "title": "EasyPython Practice Ch7",
    "section": "",
    "text": "문제 준비하기\n\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/mpg.csv\")\n\n#NaN 할당하기\nmpg.loc[[64, 123, 130, 152, 211], 'hwy'] = np.nan\n\n\n\ndrv 별로 hwy 평균이 어떻게 다른지 알아보려고 한다. 분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 한다. drv 변수와 hwy 변수에 결측치가 몇 개 있는 지 알아보자.\n\nmpg[['drv', 'hwy']].isna().sum()\n\ndrv    0\nhwy    5\ndtype: int64\n\n\n\n\n\ndf.dropna()를 이용해 hwy 변수의 결측치를 제거하고, 어떤 구동 방식의 hwy 평균이 높은지 알아봐. 하나의 pandas 구문으로 만들어야 한다.\n\nmpg.dropna(subset = 'hwy') \\\n   .groupby('drv', as_index = False) \\\n   .agg(mean = ('hwy', 'mean'))\n\n\n\n\n\n\n\n\ndrv\nmean\n\n\n\n\n0\n4\n19.242424\n\n\n1\nf\n28.200000\n\n\n2\nr\n21.000000"
  },
  {
    "objectID": "posts/hw3/hw3.html#p.194",
    "href": "posts/hw3/hw3.html#p.194",
    "title": "EasyPython Practice Ch7",
    "section": "p.194",
    "text": "p.194\n문제 준비하기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/mpg.csv\")\n\n# drv 이상치 할당\nmpg.loc[[9,13, 57, 92], 'drv'] = 'k'\n\n# cty 이상치 할당\nmpg.loc[[28, 42, 128, 202], 'cty'] = [3, 4, 39, 42]\n\n\nQ1.\ndrv에 이상치가 있는지 확인하라. 이상치를 결측 처리한 다음 이상치가 사라졌는지 확인하라. 결측처리를 할 때는 df.isin()을 활용하세요.\n\nmpg['drv'].value_counts().sort_index()\nmpg['drv'] = np.where(mpg['drv'].isin(['f', '4', 'r']), mpg['drv'], np.nan)\nmpg['drv'].value_counts().sort_index()\n\ndrv\n4    100\nf    106\nr     24\nName: count, dtype: int64\n\n\n\n\nQ2.\n상자 그림을 이용해 cty에 이상치가 있는지 확인하세요. 상자 그림 기준으로 정상 범위를 벗어난 값을 결측 처리한 다음 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하라.\n\nsns.boxplot(data = mpg, y = 'cty')\nplt.show()\n\n\n\n\n\n\n\n\n\npct25 = mpg['cty'].quantile(.25)\npct75 = mpg['cty'].quantile(.75)\nIQR = pct75 - pct25\nprint(pct25 - IQR * 1.5, pct75 + IQR * 1.5)\nmpg['cty'] = np.where((mpg['cty'] &gt; 26.5) | (mpg['cty'] &lt; 6.5), np.nan, mpg['cty'])\n\nplt.clf()\nsns.boxplot(data = mpg, y = 'cty')\nplt.show()\n\n6.5 26.5\n\n\n\n\n\n\n\n\n\n####Q3. 두 변수의 이상치를 결측 처리 했으니 이제 분석할 차례다. 이상치를 제거한 다음 drv별로 cty 평균이 어떻게 다른지 알아보자. 하나의 pandas 구문으로 만들어야 함.\n\nmpg.dropna(subset = ['drv', 'cty']) \\\n   .groupby('drv') \\\n   .agg(mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\nmean\n\n\ndrv\n\n\n\n\n\n4\n14.247423\n\n\nf\n19.470000\n\n\nr\n13.958333"
  },
  {
    "objectID": "posts/easypython_ch12/easypython_ch12.html",
    "href": "posts/easypython_ch12/easypython_ch12.html",
    "title": "EasyPython Practice Ch7. Plotly를 이용한 인터렉티브 그래프",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport plotly.express as px\n\n데이터 불러오기\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv')\n\n1. 산점도 만들기: px.scatter\n\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')\n\n                                                \n\n\n인터렉티브 기능 활용하기\n\nplotly로 만든 그래프는 마우스 움직임에 반응한다.\n산점도의 표식에 마우스 커서를 올리면 값이 나타난다.\n마우스로 드래그 하면 x,y축의 범위가 바뀌고, 더블클릭하면 원래대로 되돌아온다.\n범례항목을 클릭하면 특정 범주의 표식을 켜거나 끌 수 있다.\n\n2. 막대 그래프 만들기: px.bar()\n\n# 자동차 종류별 빈도 구하기\ndf = mpg.groupby('category', as_index = False) \\\n        .agg(n = ('category', 'count'))\ndf\n\n\n\n\n\n\n\n\ncategory\nn\n\n\n\n\n0\n2seater\n5\n\n\n1\ncompact\n47\n\n\n2\nmidsize\n41\n\n\n3\nminivan\n11\n\n\n4\npickup\n33\n\n\n5\nsubcompact\n35\n\n\n6\nsuv\n62\n\n\n\n\n\n\n\n\n# 막대그래프 만들기\npx.bar(data_frame = df, x = 'category', y = 'n', color = 'category')\n\n                                                \n\n\n3. 선그래프 만들기: px.line()\n\n# economics 불러오기\neconomics = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv\")\n\n일자별 저축률을 선 그래프로 표현하자\n\n# 선 그래프 만들기\npx.line(data_frame = economics, x = 'date', y = 'psavert')\n\n                                                \n\n\n4. 상자 그림 만들기: px.bar()\n\npx.box(data_frame = mpg, x = 'drv', y = 'hwy', color = 'drv')\n\n                                                \n\n\nplotly 활용하기 * 그래프 크기 조절하기 width: 가로크기, height: 세로크기\n\npx.scatter(data_frame = mpg, x = 'hwy', y = 'cty', color = 'drv', width = 600, height = 400)"
  },
  {
    "objectID": "posts/easypython_ch12/easypython_ch12.html#plotly를-이용한-인터렉티브-그래프",
    "href": "posts/easypython_ch12/easypython_ch12.html#plotly를-이용한-인터렉티브-그래프",
    "title": "EasyPython Practice Ch7. Plotly를 이용한 인터렉티브 그래프",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport plotly.express as px\n\n데이터 불러오기\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv')\n\n1. 산점도 만들기: px.scatter\n\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')\n\n                                                \n\n\n인터렉티브 기능 활용하기\n\nplotly로 만든 그래프는 마우스 움직임에 반응한다.\n산점도의 표식에 마우스 커서를 올리면 값이 나타난다.\n마우스로 드래그 하면 x,y축의 범위가 바뀌고, 더블클릭하면 원래대로 되돌아온다.\n범례항목을 클릭하면 특정 범주의 표식을 켜거나 끌 수 있다.\n\n2. 막대 그래프 만들기: px.bar()\n\n# 자동차 종류별 빈도 구하기\ndf = mpg.groupby('category', as_index = False) \\\n        .agg(n = ('category', 'count'))\ndf\n\n\n\n\n\n\n\n\ncategory\nn\n\n\n\n\n0\n2seater\n5\n\n\n1\ncompact\n47\n\n\n2\nmidsize\n41\n\n\n3\nminivan\n11\n\n\n4\npickup\n33\n\n\n5\nsubcompact\n35\n\n\n6\nsuv\n62\n\n\n\n\n\n\n\n\n# 막대그래프 만들기\npx.bar(data_frame = df, x = 'category', y = 'n', color = 'category')\n\n                                                \n\n\n3. 선그래프 만들기: px.line()\n\n# economics 불러오기\neconomics = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv\")\n\n일자별 저축률을 선 그래프로 표현하자\n\n# 선 그래프 만들기\npx.line(data_frame = economics, x = 'date', y = 'psavert')\n\n                                                \n\n\n4. 상자 그림 만들기: px.bar()\n\npx.box(data_frame = mpg, x = 'drv', y = 'hwy', color = 'drv')\n\n                                                \n\n\nplotly 활용하기 * 그래프 크기 조절하기 width: 가로크기, height: 세로크기\n\npx.scatter(data_frame = mpg, x = 'hwy', y = 'cty', color = 'drv', width = 600, height = 400)"
  },
  {
    "objectID": "posts/hw4.qmd/hw4.html",
    "href": "posts/hw4.qmd/hw4.html",
    "title": "Ahyeong website",
    "section": "",
    "text": "title: “EasyPython Practice Ch8” author: Ahyeong Jeong date: “2024-07-22” categories: [EasyPython]\n##p.\n필요한 패키지 불러오기\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n데이터 불러오기\n\nmpg = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv')\n\n집단별 평균표 만들기\n\ndf_mpg = mpg.groupby('drv', as_index = False) \\\n            .agg(n = ('drv', 'count'))\ndf_mpg\n\n\n\n\n\n\n\n\ndrv\nn\n\n\n\n\n0\n4\n103\n\n\n1\nf\n106\n\n\n2\nr\n25\n\n\n\n\n\n\n\n막대 그래프 만들기: barplot\n\nsns.barplot(data = df_mpg, x = \"drv\", y = \"n\", hue = 'drv')\nplt.show()\n\n\n\n\n\n\n\n\n막대 그래프 만들기: countplot\n\nplt.clf()\nsns.countplot(data = mpg, x = 'drv', hue = 'drv')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html",
    "href": "posts/hw4/hw4.html",
    "title": "EasyPython Practice Ch8",
    "section": "",
    "text": "필요한 패키지 불러오기\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n데이터 불러오기\nmpg = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv')"
  },
  {
    "objectID": "posts/hw4/hw4.html#p.204",
    "href": "posts/hw4/hw4.html#p.204",
    "title": "EasyPython Practice Ch8",
    "section": "p.204",
    "text": "p.204\nmpg데이터와 midwest 데이터를 이용해 분석문제를 해결해 보세요.\n\nQ1. mpg 데이터의 cty와 hwy간에 어떤 관계가 있는지 알아보려고 합니다.\nx축은 cty, y축은hwy`로 된 산점도를 만들어 보세요\n\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/data/midwest.csv')\nplt.clf()\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian')\\\n   .set(xlim = [0, 500000], ylim = [0, 10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#p.211",
    "href": "posts/hw4/hw4.html#p.211",
    "title": "EasyPython Practice Ch8",
    "section": "p.211",
    "text": "p.211\nmpg데이터를 이용해 분석 문제를 해결해보세요 #### Q1. 어떤 회사에서 생산한 suv 차종의 도시 연비가 높은지 알아보려고 합니다. suv차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nmpg.head()\n# 차종이 suv인 데이터 프레임 만들기 \nsuv = mpg.query(\"category == 'suv'\")\n# 회사 별 cty 연비 구하기 \ndf1 = suv.groupby('manufacturer', as_index = False) \\\n        .agg(cty_mean = ('cty', 'mean')) \\\n        .sort_values('cty_mean', ascending = False) \\\n        .head()\n        \n#막대그래프\nplt.clf()\nsns.barplot(data = df1, x = 'manufacturer', y = 'cty_mean', hue = 'manufacturer')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#q2.-1",
    "href": "posts/hw4/hw4.html#q2.-1",
    "title": "EasyPython Practice Ch8",
    "section": "Q2.",
    "text": "Q2.\n자동차 중에 어떤 category가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\ndf2 = mpg.groupby('category', as_index = False) \\\n         .agg(category_n = ('category', 'count')) \\\n         .sort_values('category_n')\ndf2\nplt.clf()\nsns.barplot(data = df2, x = 'category', y = 'category_n', hue = 'category')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#p.217",
    "href": "posts/hw4/hw4.html#p.217",
    "title": "EasyPython Practice Ch8",
    "section": "p.217",
    "text": "p.217\neconomics 데이터를 이용해 분석 문제를 해결해보세요 #### Q1. psavert가 시간에 따라 어떻게 변해 왔는지 알아보려고 합니다. 연도별 개인 저축률의 변화를 나타낸 시계열 그래프를 만들어 보세요.\n\neconomics = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv')\neconomics['date2'] = pd.to_datetime(economics['date'])\neconomics['year'] = economics['date2'].dt.year\neconomics.head()\nplt.clf()\nsns.lineplot(data = economics, x = 'year', y = 'psavert', errorbar = None)\nplt.show()\n\n\n\n\n\n\n\n\n\nQ2.\n2014년 월별 psavert의 변화를 나타낸 시계열 그래프 만들어 보세요.\n\neconomics['month'] = economics['date2'].dt.month\nyear_2014 = economics.query('year == 2014')\nplt.clf()\nsns.lineplot(data = year_2014, x = 'month', y = 'psavert')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#p.220",
    "href": "posts/hw4/hw4.html#p.220",
    "title": "EasyPython Practice Ch8",
    "section": "p.220",
    "text": "p.220\nmpg 데이터를 이용해 분석 문제를 해결해 보세요.\n\nQ1.\ncategory가 compact, subcompact, suv인 자동차의 cty가 어떻게 다른지 비교해 보려고 합니다. 세 차종의 cty를 나타낸 상자 그림을 만들어 보세요.\n\nmpg1 = mpg.query(\"category in ['compact', 'subcompact', 'suv']\")\nplt.clf()\nsns.boxplot(data = mpg1, x = 'category', y = 'cty', hue = 'category')\nplt.show()"
  },
  {
    "objectID": "posts/hw5/hw5.html",
    "href": "posts/hw5/hw5.html",
    "title": "Normal Distribution Practice",
    "section": "",
    "text": "Normal Distribution Practice\n\n정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef normal(x, mu, sigma):\n    a= 1 / (np.sqrt(2 * np.pi * sigma**2))\n    b = -((x - mu)**2) / (2 * sigma**2)\n    return a * np.exp(b)\n\nx = np.linspace(-10, 15, 100)\ny = normal(x = x, mu = 3, sigma= 2)\nplt.plot(x, y, color = \"r\", linewidth = 2)\nplt.show()\n\n\n\n\n\n\n\n\n\n파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n\n\nX ~ N(2, 3^2)\n\n\nP(X &lt; 3)\nP(2 &lt; X &lt; 5)\nP(X &lt; 3 or X &gt; 7)\n\n\n# 1)\nfrom scipy.stats import norm\nprint('P(X &lt; 3): ', norm.cdf(3, loc=2, scale=3))\n#2)\nprint('P(2 &lt; X &lt; 5): ', norm.cdf(5, loc=2, scale=3) - norm.cdf(2, loc=2, scale=3))\n#3)\np1 = norm.cdf(3, loc=2, scale=3)\np2 = 1 - norm.cdf(7, loc=2, scale=3)\nprint('P(X &lt; 3 or X &gt; 7): ', p1+p2)\n\nP(X &lt; 3):  0.6305586598182363\nP(2 &lt; X &lt; 5):  0.3413447460685429\nP(X &lt; 3 or X &gt; 7):  0.678349012091051\n\n\n\nLS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?\n\n\nprint('상위 5%에 해당하는 학생의 점수): ', norm.ppf(0.95, 30, 2))\n\n상위 5%에 해당하는 학생의 점수):  33.28970725390295"
  },
  {
    "objectID": "posts/hw6/hw6.html",
    "href": "posts/hw6/hw6.html",
    "title": "Sample Variance",
    "section": "",
    "text": "표본 분산 계산 시 왜 n-1로 나누는가.\n문제\n\nU(3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정하자.\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하기\ns_2의 분포와 k_2의 분포를 그려보자 (10000개 사용)\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그리기\n결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한 지 서술하기.\n\n0. 필요한 패키지 가져오기\n\nimport numpy as np\nfrom scipy.stats import uniform\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n1. s_2 분포 그래프 그리기\n\nx=uniform.rvs(loc=3, scale=7, size=20*10000)\nx=x.reshape(-1, 20)\nx.shape\npop_var = uniform.var(loc=3, scale=7)\n\n\ns_2 = np.var(x, axis=1, ddof=1)\nsns.histplot(s_2, stat='density', color = \"lightpink\")\nplt.axvline(pop_var, color=\"red\", linestyle = '--')\nplt.xlim([0, 8])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n2. k_2 분포 그래프 그리기\n\nk_2 = np.var(x, axis=1, ddof=0)\nsns.histplot(k_2, stat='density', color = \"lightblue\")\nplt.axvline(pop_var, color=\"red\", linestyle = '--')\nplt.xlim([0, 8])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n두 그래프를 봤을 때, s_2의 분포그래프가 모분산을 나타내는 녹색축을 중심을 두고 분포된 것을 알 수 있다.\n반면, k_2의 분포그래프가 모분산을 나타내는 녹색축을 중심으로 왼쪽으로 편향된 것이 확인된다.\n따라서 n-1로 나눈 s_2가 모분산을 더 잘 추정한다고 할 수 있다."
  },
  {
    "objectID": "posts/hw6/hw6.html#n-1-vs.-n",
    "href": "posts/hw6/hw6.html#n-1-vs.-n",
    "title": "Sample Variance",
    "section": "",
    "text": "표본 분산 계산 시 왜 n-1로 나누는가.\n문제\n\nU(3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정하자.\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하기\ns_2의 분포와 k_2의 분포를 그려보자 (10000개 사용)\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그리기\n결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한 지 서술하기.\n\n0. 필요한 패키지 가져오기\n\nimport numpy as np\nfrom scipy.stats import uniform\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n1. s_2 분포 그래프 그리기\n\nx=uniform.rvs(loc=3, scale=7, size=20*10000)\nx=x.reshape(-1, 20)\nx.shape\npop_var = uniform.var(loc=3, scale=7)\n\n\ns_2 = np.var(x, axis=1, ddof=1)\nsns.histplot(s_2, stat='density', color = \"lightpink\")\nplt.axvline(pop_var, color=\"red\", linestyle = '--')\nplt.xlim([0, 8])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n2. k_2 분포 그래프 그리기\n\nk_2 = np.var(x, axis=1, ddof=0)\nsns.histplot(k_2, stat='density', color = \"lightblue\")\nplt.axvline(pop_var, color=\"red\", linestyle = '--')\nplt.xlim([0, 8])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n두 그래프를 봤을 때, s_2의 분포그래프가 모분산을 나타내는 녹색축을 중심을 두고 분포된 것을 알 수 있다.\n반면, k_2의 분포그래프가 모분산을 나타내는 녹색축을 중심으로 왼쪽으로 편향된 것이 확인된다.\n따라서 n-1로 나눈 s_2가 모분산을 더 잘 추정한다고 할 수 있다."
  },
  {
    "objectID": "posts/EasyPython_Ch8/EasyPython_Ch8.html",
    "href": "posts/EasyPython_Ch8/EasyPython_Ch8.html",
    "title": "EasyPython Practice Ch8",
    "section": "",
    "text": "Ch 8. 그래프 만들기\n\nLine Plot\n필요한 패키지 불러오기.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n데이터 불러오기.\n\neconomics = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv\")\neconomics.head()\neconomics.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 574 entries, 0 to 573\nData columns (total 6 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   date      574 non-null    object \n 1   pce       574 non-null    float64\n 2   pop       574 non-null    float64\n 3   psavert   574 non-null    float64\n 4   uempmed   574 non-null    float64\n 5   unemploy  574 non-null    int64  \ndtypes: float64(4), int64(1), object(1)\nmemory usage: 27.0+ KB\n\n\n시계열 그래프 만들기.\n\nsns.lineplot(data = economics, x =\"date\", y =\"unemploy\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n문자타입의 date를 날짜 시간 타입으로 변환.\n\neconomics['date2'] = pd.to_datetime(economics['date'])\neconomics.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 574 entries, 0 to 573\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype         \n---  ------    --------------  -----         \n 0   date      574 non-null    object        \n 1   pce       574 non-null    float64       \n 2   pop       574 non-null    float64       \n 3   psavert   574 non-null    float64       \n 4   uempmed   574 non-null    float64       \n 5   unemploy  574 non-null    int64         \n 6   date2     574 non-null    datetime64[ns]\ndtypes: datetime64[ns](1), float64(4), int64(1), object(1)\nmemory usage: 31.5+ KB\n\n\n변수의 타입을 날짜 시간으로 바꿔도 값이 달라지지 않음.\n\neconomics[['date', 'date2']]\n\n\n\n\n\n\n\n\ndate\ndate2\n\n\n\n\n0\n1967-07-01\n1967-07-01\n\n\n1\n1967-08-01\n1967-08-01\n\n\n2\n1967-09-01\n1967-09-01\n\n\n3\n1967-10-01\n1967-10-01\n\n\n4\n1967-11-01\n1967-11-01\n\n\n...\n...\n...\n\n\n569\n2014-12-01\n2014-12-01\n\n\n570\n2015-01-01\n2015-01-01\n\n\n571\n2015-02-01\n2015-02-01\n\n\n572\n2015-03-01\n2015-03-01\n\n\n573\n2015-04-01\n2015-04-01\n\n\n\n\n574 rows × 2 columns\n\n\n\n변수가 날짜 시간 타입으로 되어 있으면 df.dt로 연, 월, 일 추출 가능\n\neconomics['date2'].dt.year.head()  # 연 추출\neconomics['date2'].dt.month.head() # 월 추출\neconomics['date2'].dt.day.head()   # 일 추출 \neconomics['date2'].dt.month_name() # 월 명 추출 \neconomics['date2'].dt.quarter      # 분기 추출 \neconomics['quarter'] = economics['date2'].dt.quarter\neconomics[['date2', 'quarter']]\neconomics['date2'].dt.day_name()   #요일 알아보기 \n\n0       Saturday\n1        Tuesday\n2         Friday\n3         Sunday\n4      Wednesday\n         ...    \n569       Monday\n570     Thursday\n571       Sunday\n572       Sunday\n573    Wednesday\nName: date2, Length: 574, dtype: object\n\n\n한달을 더할 지 30일을 더할 지 생각해보기.\n\neconomics['date2'] + pd.DateOffset(months=1)\neconomics['date2'] + pd.DateOffset(days=30)\neconomics['date2'].dt.is_leap_year   # 윤년 체크 \n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n569    False\n570    False\n571    False\n572    False\n573    False\nName: date2, Length: 574, dtype: bool\n\n\n연도 별 실업률 선그래프\n\n# 연도별로 표본 평균을 구해서 선그래프에 나타남.\neconomics['year'] = economics['date2'].dt.year\nsns.lineplot(data = economics, x = 'year', y = 'unemploy')\nsns.scatterplot(data = economics, x = 'year', y = 'unemploy')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n표시된 면적은 신뢰구간을 나타낸다.\nerrorbar = None 설정 시 신뢰구간 제외하고 그래프 그려짐.\n\neconomics의 연도별 실업률 평균과 표준편차 구하기\n\ndf = economics.groupby('year', as_index = False) \\\n              .agg(mean = ('unemploy', 'mean'),\n                   std  = ('unemploy' ,'std'),\n                   n    = ('unemploy', 'count'))\nZ = 1.96\ndf['left_CI'] = df['mean'] - Z * df['std']/np.sqrt(df['n']) \ndf['right_CI'] = df['mean'] + Z * df['std']/np.sqrt(df['n'])\ndf.head()\n\n\n\n\n\n\n\n\nyear\nmean\nstd\nn\nleft_CI\nright_CI\n\n\n\n\n0\n1967\n3012.333333\n80.176472\n6\n2948.178794\n3076.487872\n\n\n1\n1968\n2797.416667\n111.575053\n12\n2734.287138\n2860.546196\n\n\n2\n1969\n2830.166667\n121.488371\n12\n2761.428150\n2898.905183\n\n\n3\n1970\n4127.333333\n567.821888\n12\n3806.057856\n4448.608811\n\n\n4\n1971\n5021.666667\n85.883995\n12\n4973.073222\n5070.260111\n\n\n\n\n\n\n\n\nx = df[\"year\"]\ny = df[\"mean\"]\nplt.plot(x, y, color= 'black')\nplt.scatter(x, df['left_CI'], color = 'blue', s=2)\nplt.scatter(x, df['right_CI'], color = 'blue', s=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n혼자서 해보기\neconomics' 데이터를 이용해 분석 문제를 해결해 보세요 Q1.psavert`(개인 저축률)가 시간에 따라 어떻게 변해 왔는지 알아보려고 한다. 연도별 개인 저축률 변화를 나타낸 시계열 그래프를 만들어보자.\n\neconomics = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv')\neconomics['date2'] = pd.to_datetime(economics['date'])\neconomics['year'] = economics['date2'].dt.year\nsns.lineplot(data = economics, x = 'year', y = 'psavert')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nQ2. 2014년 월별 psavert의 변화를 나타낸 시계열 그래프를 만들어 보세요.\n\neconomics['month'] = economics['date2'].dt.month\ndf_2014 = economics.query(\"year == 2014\")\nsns.lineplot(data = df_2014, x = 'month', y = 'psavert')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/EasyPython_Ch9/EasyPython_Ch9.html",
    "href": "posts/EasyPython_Ch9/EasyPython_Ch9.html",
    "title": "EasyPython Practice Ch9",
    "section": "",
    "text": "Ch9. 데이터 분석 프로젝트\n\n‘한국복지패널 데이터’ 분석 준비하기\n필요한 패키지 불러오기\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n데이터 분석 준비하기"
  },
  {
    "objectID": "posts/hw7.html",
    "href": "posts/hw7.html",
    "title": "Convinience Level Practice",
    "section": "",
    "text": "Convinience Level Visualization Practice\n필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\n\n데이터 불러오기\n\n# !pip install pyreadstat\nwelfare = pd.read_spss(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/Koweps_hpwc14_2019_beta2.sav\")\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns\n\n\n\n필요한 컬럼들 이름 바꾸기\n\nwelfare = welfare.rename(\n    columns = {'h14_g3'     : 'sex',           # 성별\n               'h14_g4'     : 'birth',         # 태어난 년도\n               'h14_g10'    : 'marriage_type', # 혼인 상태\n               'h14_g11'    : 'religion',      # 종교\n               'p1402_8aq1' : 'income',        # 월급\n               'h14_eco9'   : 'code_job',      # 직업 코드\n               'h14_reg7'   : 'code_region'})   # 지역 코드 \nwelfare= welfare[['sex', 'birth', 'marriage_type', 'religion', 'income', 'code_job', 'code_region']]\n\nsex 컬럼 검토 및 male, female로 변경\n\n# 원래 성별 변수\nwelfare['sex'].dtypes\nwelfare['sex'].value_counts() \n# welfare['sex'].isna().sum()\n\n# male과 female로 변경\nwelfare['sex'] = np.where(welfare['sex'] == 1, 'male', 'female')\nwelfare['sex'].value_counts()\n\nsex\nfemale    7913\nmale      6505\nName: count, dtype: int64\n\n\n성별에 따른 월급 알아보기\n\nsex_income = welfare.dropna(subset = 'income') \\\n                         .groupby('sex', as_index = False) \\\n                         .agg(mean_income = ('income', 'mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571\n\n\n\n\n\n\n\n성별 월급 평균표\n\nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income', hue = \"sex\", palette = \"pastel\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n신뢰구간 계산 전 필요한 모수 구하기\n\n성별에 따른 income 데이터프레임 생성\n\n\nf_income = welfare.dropna(subset = \"income\") \\\n                  .query(\"sex == 'female'\")['income']\nm_income = welfare.dropna(subset = 'income') \\\n                  .query(\"sex == 'male'\")['income']\n\n\n성별 별 평균\n\n\nf_bar = np.mean(f_income)\nm_bar = np.mean(m_income)\n\n\n표본표준편차 사용해서 모표분편차 추정\n\n\nf_std = np.sqrt(np.var(f_income, ddof=1))\nm_std = np.sqrt(np.var(m_income, ddof=1))\n\n\n성별 별 표본 개수 구하기\n\n\nf_n = len(f_income)\nm_n = len(m_income)\n\n\nz\n\n\nz_0025 = norm.ppf(0.95, loc=0, scale=1)\n\n성별 별로 신뢰구간 계산하기\n\nf_conf1 = f_bar - z_0025 * f_std/np.sqrt(f_n)\nf_conf2 = f_bar + z_0025 * f_std/np.sqrt(f_n)\nm_conf1 = m_bar - z_0025 * m_std/np.sqrt(m_n)\nm_conf2 = m_bar + z_0025 * m_std/np.sqrt(m_n)\n\n그래프에 나타내기\n\nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income', hue = \"sex\", palette = \"pastel\")\nplt.vlines(x = \"female\", ymin = f_conf1, ymax = f_conf2, colors = \"blue\")\nplt.vlines(x = \"male\", ymin = m_conf1, ymax = m_conf2, colors = \"red\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nmale_mean - z_0025 *"
  },
  {
    "objectID": "posts/ISLP/ISLP1/ISLP Ch2.html",
    "href": "posts/ISLP/ISLP1/ISLP Ch2.html",
    "title": "ISLP Lab: Introduction to Python",
    "section": "",
    "text": "print()\n\nprint('fit a model with', 11, 'variables')\n\nfit a model with 11 variables\n\n\nlist & concatenation\n\nx = [3, 4, 5]  # list\ny = [4, 9, 7]\nx + y # concatenation \n\n[3, 4, 5, 4, 9, 7]\n\n\n\n\n\nnp.array(): function to define one-dimensinal arrays (vectors)\n\nimport numpy as np\nx = np.array([3, 4, 5])\ny = np.array([4, 9, 7])\nx + y\n\narray([ 7, 13, 12])\n\n\nWe can create a two-dimensional array as follows.\n\nx = np.array([[1, 2], [3, 4]])\nx\nx.ndim\nx.dtype\n\ndtype('int64')\n\n\nAn array of floating point numbers\n\nnp.array([[1, 2], [3.0, 4]]).dtype\nnp.array([[1, 2], [3, 4]], float).dtype\nx.shape\n\n(2, 2)\n\n\nA method is a function that is associated with an object. x.sum(): sums all of its elements. np.sum() function as well.\n\nx = np.array([1, 2, 3, 4])\nx.sum()\nx = np.array([1, 2, 3, 4])\nnp.sum(x)\n\nnp.int64(10)\n\n\nreshape() method: returns a new array with the same elements as x, but a different shape\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint('beginning x:\\n', x)\nx_reshape = x.reshape((2, 3))\nprint('reshaped x:\\n', x_reshape)\nx_reshape[0, 0]  # indexing 1\nx_reshape[1, 2]  # indexing 2\n\nbeginning x:\n [1 2 3 4 5 6]\nreshaped x:\n [[1 2 3]\n [4 5 6]]\n\n\nnp.int64(6)\n\n\n__\n\nprint('x before we modify x_reshape :\\n', x)\nprint('x_reshpae before we modify x_reshape:\\n', x_reshape)\nx_reshape[0, 0] = 5\nprint('x_reshape after we modify its top left element:\\n', x_reshape)\nprint('x after we modify top left element of x_reshape:\\n', x)\n\nx before we modify x_reshape :\n [1 2 3 4 5 6]\nx_reshpae before we modify x_reshape:\n [[1 2 3]\n [4 5 6]]\nx_reshape after we modify its top left element:\n [[5 2 3]\n [4 5 6]]\nx after we modify top left element of x_reshape:\n [5 2 3 4 5 6]\n\n\n\n\n\n\nimport pandas as pd \n#college = pd.read_csv(\"College.csv\")\n\n\n\n\n\n#college2 = pd.read_csv('College.csv', index_col = 0)\n#college3 = college.rename({'Unnamed: 0': 'College'},\n#                            axis = 1 )\n#college3 = college3.set_index('college')"
  },
  {
    "objectID": "posts/ISLP/ISLP1/ISLP Ch2.html#islp-lab-introduction-to-python",
    "href": "posts/ISLP/ISLP1/ISLP Ch2.html#islp-lab-introduction-to-python",
    "title": "ISLP Lab: Introduction to Python",
    "section": "",
    "text": "print()\n\nprint('fit a model with', 11, 'variables')\n\nfit a model with 11 variables\n\n\nlist & concatenation\n\nx = [3, 4, 5]  # list\ny = [4, 9, 7]\nx + y # concatenation \n\n[3, 4, 5, 4, 9, 7]\n\n\n\n\n\nnp.array(): function to define one-dimensinal arrays (vectors)\n\nimport numpy as np\nx = np.array([3, 4, 5])\ny = np.array([4, 9, 7])\nx + y\n\narray([ 7, 13, 12])\n\n\nWe can create a two-dimensional array as follows.\n\nx = np.array([[1, 2], [3, 4]])\nx\nx.ndim\nx.dtype\n\ndtype('int64')\n\n\nAn array of floating point numbers\n\nnp.array([[1, 2], [3.0, 4]]).dtype\nnp.array([[1, 2], [3, 4]], float).dtype\nx.shape\n\n(2, 2)\n\n\nA method is a function that is associated with an object. x.sum(): sums all of its elements. np.sum() function as well.\n\nx = np.array([1, 2, 3, 4])\nx.sum()\nx = np.array([1, 2, 3, 4])\nnp.sum(x)\n\nnp.int64(10)\n\n\nreshape() method: returns a new array with the same elements as x, but a different shape\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint('beginning x:\\n', x)\nx_reshape = x.reshape((2, 3))\nprint('reshaped x:\\n', x_reshape)\nx_reshape[0, 0]  # indexing 1\nx_reshape[1, 2]  # indexing 2\n\nbeginning x:\n [1 2 3 4 5 6]\nreshaped x:\n [[1 2 3]\n [4 5 6]]\n\n\nnp.int64(6)\n\n\n__\n\nprint('x before we modify x_reshape :\\n', x)\nprint('x_reshpae before we modify x_reshape:\\n', x_reshape)\nx_reshape[0, 0] = 5\nprint('x_reshape after we modify its top left element:\\n', x_reshape)\nprint('x after we modify top left element of x_reshape:\\n', x)\n\nx before we modify x_reshape :\n [1 2 3 4 5 6]\nx_reshpae before we modify x_reshape:\n [[1 2 3]\n [4 5 6]]\nx_reshape after we modify its top left element:\n [[5 2 3]\n [4 5 6]]\nx after we modify top left element of x_reshape:\n [5 2 3 4 5 6]\n\n\n\n\n\n\nimport pandas as pd \n#college = pd.read_csv(\"College.csv\")\n\n\n\n\n\n#college2 = pd.read_csv('College.csv', index_col = 0)\n#college3 = college.rename({'Unnamed: 0': 'College'},\n#                            axis = 1 )\n#college3 = college3.set_index('college')"
  },
  {
    "objectID": "posts/ISLP/ISLP1/ISLP Ch2.html#practice",
    "href": "posts/ISLP/ISLP1/ISLP Ch2.html#practice",
    "title": "ISLP Lab: Introduction to Python",
    "section": "Practice",
    "text": "Practice\n\n8.\n이 문제는 College.csv 파일에 있는 College자료에 관련된다. 이것은 미국 내의 777개 대학에 대한 다수의 변수들을 포함한다.\n필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#!pip install ISLP\n\n\n\n8-(a)\nCall the loaded data college\n\ncollege = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/College.csv\")\n\n\n\n8-(b)\nThe first column is just the name of each university in a column named something like Unnamed: 0\nFollowing codes are used to give each row a name corresponding to the appropriate university\n\nprint('Column names of college data :', college.columns)\ncollege2 = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/College.csv\", index_col = 0)\ncollege3 = college.rename({'Unnamed: 0': 'College'},\n                          axis =1)\ncollege3 = college3.set_index('College')\ncollege = college3\n\nColumn names of college data : Index(['Unnamed: 0', 'Private', 'Apps', 'Accept', 'Enroll', 'Top10perc',\n       'Top25perc', 'F.Undergrad', 'P.Undergrad', 'Outstate', 'Room.Board',\n       'Books', 'Personal', 'PhD', 'Terminal', 'S.F.Ratio', 'perc.alumni',\n       'Expend', 'Grad.Rate'],\n      dtype='object')\n\n\n\n\n8-(c)\nUse the describe() method of to produce a numerical summary of the variables\n\ncollege.describe()\n\n\n\n\n\n\n\n\nApps\nAccept\nEnroll\nTop10perc\nTop25perc\nF.Undergrad\nP.Undergrad\nOutstate\nRoom.Board\nBooks\nPersonal\nPhD\nTerminal\nS.F.Ratio\nperc.alumni\nExpend\nGrad.Rate\n\n\n\n\ncount\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.000000\n777.00000\n\n\nmean\n3001.638353\n2018.804376\n779.972973\n27.558559\n55.796654\n3699.907336\n855.298584\n10440.669241\n4357.526384\n549.380952\n1340.642214\n72.660232\n79.702703\n14.089704\n22.743887\n9660.171171\n65.46332\n\n\nstd\n3870.201484\n2451.113971\n929.176190\n17.640364\n19.804778\n4850.420531\n1522.431887\n4023.016484\n1096.696416\n165.105360\n677.071454\n16.328155\n14.722359\n3.958349\n12.391801\n5221.768440\n17.17771\n\n\nmin\n81.000000\n72.000000\n35.000000\n1.000000\n9.000000\n139.000000\n1.000000\n2340.000000\n1780.000000\n96.000000\n250.000000\n8.000000\n24.000000\n2.500000\n0.000000\n3186.000000\n10.00000\n\n\n25%\n776.000000\n604.000000\n242.000000\n15.000000\n41.000000\n992.000000\n95.000000\n7320.000000\n3597.000000\n470.000000\n850.000000\n62.000000\n71.000000\n11.500000\n13.000000\n6751.000000\n53.00000\n\n\n50%\n1558.000000\n1110.000000\n434.000000\n23.000000\n54.000000\n1707.000000\n353.000000\n9990.000000\n4200.000000\n500.000000\n1200.000000\n75.000000\n82.000000\n13.600000\n21.000000\n8377.000000\n65.00000\n\n\n75%\n3624.000000\n2424.000000\n902.000000\n35.000000\n69.000000\n4005.000000\n967.000000\n12925.000000\n5050.000000\n600.000000\n1700.000000\n85.000000\n92.000000\n16.500000\n31.000000\n10830.000000\n78.00000\n\n\nmax\n48094.000000\n26330.000000\n6392.000000\n96.000000\n100.000000\n31643.000000\n21836.000000\n21700.000000\n8124.000000\n2340.000000\n6800.000000\n103.000000\n100.000000\n39.800000\n64.000000\n56233.000000\n118.00000\n\n\n\n\n\n\n\n\n\n8-(d)\nUse the pd.plotting.scatter_matrix() function to produce a scatterplot matrix of the first columns [Top10perc, Apps, Enroll]. Recall that you can reference a list C of columns of a data frame A using A[C].\n\npd.plotting.scatter_matrix(college[['Top10perc', 'Apps', 'Enroll']])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\npd.plotting.scatter_matrix() : to create a scatterplot matrix to visualize all of the pairwise relationships between the columns in a data frame\n\n\n\n8 - (e)\nUse the boxplot() method of college to produce side-by=side boxplots of Outstate versus Private\n\ncollege['Outstate'].dtype\ncollege['Private'].value_counts()\nsns.boxplot(data = college, x = 'Private', y = 'Outstate', hue = 'Private', palette = \"pink\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n8 - (f)\nCreate a new qualitative variable, called Elite, by binning the Top10perc variable into two groups Based on the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\ncollege['Elite'] = pd.cut(college['Top10perc'],\n                          [0, 50, 100],\n                          labels=['No', 'Yes'])\n\nUse the value_counts() method of college['Elite'] to see how many elite universities there are\n\ncollege['Elite'].value_counts()\n\nElite\nNo     699\nYes     78\nName: count, dtype: int64\n\n\nFinally, use the boxplot() method again to produce side-by-side boxplots of Outstate versus Elite.\n\nsns.boxplot(data = college, x = \"Elite\", y = \"Outstate\", hue = \"Elite\", palette = \"pink\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n8 - (g)\nUse the plot.hist() method of college to produce some histograms with differing numbers of bins for a few of the quantitative variables The command plt.subplots(2, 2) may be useful: it will divide the plot window into four regions so that four plots can be made simultaneously. By changing the arguments you can divide the screen up in other combinations.\n\ncollege['Expend'].describe()\nfig = plt.figure()\nplt.subplot(221)\nsns.histplot(data = college, x = \"Expend\")\nplt.subplot(222)\nsns.histplot(data = college, x = \"Personal\")\nplt.subplot(223)\nsns.histplot(data = college, x = \"Room.Board\")\nplt.subplot(224)\nsns.histplot(data = college, x = \"Books\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n9\nThis exercise involves the Auto data set studied in the lab. Make sure that the missing values have been removed from the data.\n\n\n9 -(a)\nWhich of the predictors are quantitative, and which are qualitatative?\n\nauto = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/Auto.csv\")\nauto.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 397 entries, 0 to 396\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           397 non-null    float64\n 1   cylinders     397 non-null    int64  \n 2   displacement  397 non-null    float64\n 3   horsepower    397 non-null    object \n 4   weight        397 non-null    int64  \n 5   acceleration  397 non-null    float64\n 6   year          397 non-null    int64  \n 7   origin        397 non-null    int64  \n 8   name          397 non-null    object \ndtypes: float64(3), int64(4), object(2)\nmemory usage: 28.0+ KB\n\n\n\nThe variables which dtype is object are horsepower, name\n\nThere are missing values represented by a ?. Change to numeric.\n\nauto['horsepower'].unique()\nauto = auto[auto.horsepower != \"?\"].copy()\nauto['horsepower'] = pd.to_numeric(auto['horsepower'])\n\n\nquantitative = auto.select_dtypes(include =['number']).columns\nqualitative = auto.select_dtypes(exclude = ['number']).columns\n\n\n\n9 - (b)\nWhat is the range of each quantitative predictor? You can answer this using the min() and max() methods in numpy.\n\nauto_describe = auto.describe()\nauto_describe.loc['range'] = auto_describe.loc['max'] - auto_describe.loc['min']\nauto_describe.loc['range']\n\nmpg               37.6\ncylinders          5.0\ndisplacement     387.0\nhorsepower       184.0\nweight          3527.0\nacceleration      16.8\nyear              12.0\norigin             2.0\nName: range, dtype: float64\n\n\n\n\n9 - (c)\nWhat is the mean and standard deviation of each quantitative predictor?\n\n# auto.describe()\nauto_describe.loc[['range', 'mean', 'std']]\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nyear\norigin\n\n\n\n\nrange\n37.600000\n5.000000\n387.000000\n184.000000\n3527.000000\n16.800000\n12.000000\n2.000000\n\n\nmean\n23.445918\n5.471939\n194.411990\n104.469388\n2977.584184\n15.541327\n75.979592\n1.576531\n\n\nstd\n7.805007\n1.705783\n104.644004\n38.491160\n849.402560\n2.758864\n3.683737\n0.805518\n\n\n\n\n\n\n\n\n\n9 - (d)\nRemove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor?\n\nauto_drop = auto.drop(auto.index[10:85])\nauto_drop_describe = auto.describe()\nauto_drop_describe.loc['range'] = auto_drop_describe.loc['max'] - auto_drop_describe.loc['min']\nauto_drop_describe.loc[[\"range\", \"mean\", \"std\"]]\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nyear\norigin\n\n\n\n\nrange\n37.600000\n5.000000\n387.000000\n184.000000\n3527.000000\n16.800000\n12.000000\n2.000000\n\n\nmean\n23.445918\n5.471939\n194.411990\n104.469388\n2977.584184\n15.541327\n75.979592\n1.576531\n\n\nstd\n7.805007\n1.705783\n104.644004\n38.491160\n849.402560\n2.758864\n3.683737\n0.805518\n\n\n\n\n\n\n\n\n\n9 - (e)\nUsing the full data set, investicate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predidctors. Comment on your findings.\n\nsns.pairplot(auto, plot_kws={'s': 5})\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n9 - (f)\nSuppose that we wish to predict mpg on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg?\nBased on the previous question, we could use weight, horsepower and displacement. These variables have a non-linear relationship with mpg."
  },
  {
    "objectID": "posts/hw8/hw8.html",
    "href": "posts/hw8/hw8.html",
    "title": "Hypothesis",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport numpy as np\nfrom scipy.stats import t\n\n\n\n문제 데이터\n\ncars = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804])\n\n\n\n필요한 모수 구하기\n\nn = len(cars)\nsample_mean = np.mean(cars)\nsample_std = np.std(cars, ddof= 1)\n\n\n\n2.\nnull: mu &gt;= 16.0 alter: mu &lt; 16.0\n\n\n3.\n\nt_value = (sample_mean - 16) / (sample_std/np.sqrt(n))\nprint('t_value :', t_value)\n\nt_value : -1.8500447456376756\n\n\n\n\n4.\n\np_value = (t.cdf(t_value, 14))\nprint('p_value :', p_value)\n\np_value : 0.042762417664207845\n\n\n\n\n6.\n\nsample_mean - t.ppf(0.975, df =  14) * (sample_std / np.sqrt(n)), sample_mean + t.ppf(0.975, df =  14) * (sample_std / np.sqrt(n))\n\n(14.988864240339733, 16.074602426326933)"
  }
]