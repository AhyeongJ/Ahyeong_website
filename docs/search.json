[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ahyeong Website",
    "section": "",
    "text": ":::{#hero-heading}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "LS_lec3.html",
    "href": "LS_lec3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "LS_lec3_web.html",
    "href": "LS_lec3_web.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf\n\n!pip install pandas as pd\n!pip install numpy as np\n!pip install sklearn\n                                \nimport pandas as pd\n\nRequirement already satisfied: pandas in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.2.2)\nRequirement already satisfied: numpy in c:\\users\\user\\ds\\python\\python312\\lib\\site-packages (2.0.0)\nCollecting sklearn\n  Using cached sklearn-0.0.post12.tar.gz (2.6 kB)\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'error'\n\n\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\nERROR: Could not find a version that satisfies the requirement as (from versions: none)\nERROR: No matching distribution found for as\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip\n  error: subprocess-exited-with-error\n  \n  × Getting requirements to build wheel did not run successfully.\n  │ exit code: 1\n  ╰─&gt; [15 lines of output]\n      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n      rather than 'sklearn' for pip commands.\n      \n      Here is how to fix this error in the main use cases:\n      - use 'pip install scikit-learn' rather than 'pip install sklearn'\n      - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n      - if the 'sklearn' package is used by one of your dependencies,\n        it would be great if you take some time to track which package uses\n        'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n      - as a last resort, set the environment variable\n        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n      \n      More information is available at\n      https://github.com/scikit-learn/sklearn-pypi-package\n      [end of output]\n  \n  note: This error originates from a subprocess, and is likely not a problem with pip.\nerror: subprocess-exited-with-error\n\n× Getting requirements to build wheel did not run successfully.\n│ exit code: 1\n╰─&gt; See above for output.\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.\n\n[notice] A new release of pip is available: 24.0 -&gt; 24.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "href": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "href": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-편매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "",
    "text": "df[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "href": "hw1.html#q1.-mpg데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q1. mpg데이터를 불러와 복사본을 만드세요.",
    "text": "Q1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()"
  },
  {
    "objectID": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "href": "hw1.html#q2.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요",
    "title": "hw1",
    "section": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요",
    "text": "Q2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB"
  },
  {
    "objectID": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "href": "hw1.html#q3.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.",
    "title": "hw1",
    "section": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.",
    "text": "Q3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "hw1.html#q1.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "Q1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB"
  },
  {
    "objectID": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "href": "hw1.html#q2.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "title": "hw1",
    "section": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.",
    "text": "Q2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                          'popasian' : 'asian'})"
  },
  {
    "objectID": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "hw1.html#q3.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "Q3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()"
  },
  {
    "objectID": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "href": "hw1.html#q4.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어보세요.",
    "title": "hw1",
    "section": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.",
    "text": "Q4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "href": "hw1.html#q5.-large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해보세요.",
    "title": "hw1",
    "section": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.",
    "text": "Q5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "hw1.html#p.84-혼자서-해보기",
    "href": "hw1.html#p.84-혼자서-해보기",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#p.115-혼자서-해보기",
    "href": "hw1.html#p.115-혼자서-해보기",
    "title": "hw1",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#p.130",
    "href": "hw1.html#p.130",
    "title": "hw1",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "note 3.html",
    "href": "note 3.html",
    "title": "2일차 강의 노트",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "presentation1 _traditional.html",
    "href": "presentation1 _traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "hw2.html#p.144",
    "href": "hw2.html#p.144",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "hw2.html#p.153",
    "href": "hw2.html#p.153",
    "title": "hw2",
    "section": "p.153",
    "text": "p.153\n\nQ1. audi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자\naudi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#p.158",
    "href": "hw2.html#p.158",
    "title": "hw2",
    "section": "p.158",
    "text": "p.158\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자.\n\n\n데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "hw2.html#p.166",
    "href": "hw2.html#p.166",
    "title": "hw2",
    "section": "P.166",
    "text": "P.166\n\nQ1.\n\n\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수\n\n\n어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n\n\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다.\n\n\n어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n\n\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다.\n\n\nhwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n\n\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다.\n\n\n회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "hw2.html#p.150",
    "href": "hw2.html#p.150",
    "title": "hw2",
    "section": "p.150",
    "text": "p.150\n\nQ1. mpg 데이터 중 일부만 추출해 분석에 활용하자.\n\n\nmpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라.\n\n\n새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2. 자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다.\n\n\n앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "presentation1_traditional.html",
    "href": "presentation1_traditional.html",
    "title": "presentation1_traditional",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS Bigdata School Homework 1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/index.html#p.84-혼자서-해보기",
    "href": "posts/hw1/index.html#p.84-혼자서-해보기",
    "title": "LS Bigdata School Homework 1",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/index.html#p.115-혼자서-해보기",
    "href": "posts/hw1/index.html#p.115-혼자서-해보기",
    "title": "LS Bigdata School Homework 1",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#p.130",
    "href": "posts/hw1/index.html#p.130",
    "title": "LS Bigdata School Homework 1",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nplt.clf()\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "EasyPython Practice Ch4&5\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nEasyPython Practice Ch6\n\n\n\n\n\n\nEasyPython\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nLS Bigdata School note 1\n\n\n\n\n\n\nnote\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\n\n\n\n\n\n\nLS Bigdata School Presentation 1\n\n\n\n\n\n\npresentation\n\n\n\n\n\n\n\n\n\nJul 17, 2024\n\n\nAhyeong Jeong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS Bigdata School Homework 2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/index.html#p.144",
    "href": "posts/hw2/index.html#p.144",
    "title": "LS Bigdata School Homework 2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\n\n\n\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/index.html#p.150",
    "href": "posts/hw2/index.html#p.150",
    "title": "LS Bigdata School Homework 2",
    "section": "p.150",
    "text": "p.150\n\nQ1. mpg 데이터 중 일부만 추출해 분석에 활용하자.\n\n\nmpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라.\n\n\n새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2. 자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다.\n\n\n앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "posts/hw2/index.html#p.153",
    "href": "posts/hw2/index.html#p.153",
    "title": "LS Bigdata School Homework 2",
    "section": "p.153",
    "text": "p.153\n\nQ1. audi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자\naudi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#p.158",
    "href": "posts/hw2/index.html#p.158",
    "title": "LS Bigdata School Homework 2",
    "section": "p.158",
    "text": "p.158\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자.\n\n\n데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "posts/hw2/index.html#p.166",
    "href": "posts/hw2/index.html#p.166",
    "title": "LS Bigdata School Homework 2",
    "section": "P.166",
    "text": "P.166\n\nQ1.\n\n\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수\n\n\n어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n\n\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다.\n\n\n어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n\n\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다.\n\n\nhwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n\n\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다.\n\n\n회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "posts/note/index.html",
    "href": "posts/note/index.html",
    "title": "LS Bigdata School note 1",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "posts/presentation/index.html",
    "href": "posts/presentation/index.html",
    "title": "LS Bigdata School Presentation 1",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw1/hw1.html",
    "href": "posts/hw1/hw1.html",
    "title": "EasyPython Practice Ch4&5",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.84-혼자서-해보기",
    "href": "posts/hw1/hw1.html#p.84-혼자서-해보기",
    "title": "EasyPython Practice Ch4&5",
    "section": "",
    "text": "import pandas as pd\ndf = pd.DataFrame({\"제품\"   : [\"사과\", \"딸기\", \"수박\"],\n                   \"가격\"   : [1800, 1500, 3000],\n                   \"판매량\" : [24, 38, 13]})\ndf                  \n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.115-혼자서-해보기",
    "href": "posts/hw1/hw1.html#p.115-혼자서-해보기",
    "title": "EasyPython Practice Ch4&5",
    "section": "p.115 혼자서 해보기",
    "text": "p.115 혼자서 해보기\n\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nmpg2 = mpg2.rename(columns = {'cty' : 'city',\n                      'hwy' : 'highway'})\nmpg2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   manufacturer  234 non-null    object \n 1   model         234 non-null    object \n 2   displ         234 non-null    float64\n 3   year          234 non-null    int64  \n 4   cyl           234 non-null    int64  \n 5   trans         234 non-null    object \n 6   drv           234 non-null    object \n 7   city          234 non-null    int64  \n 8   highway       234 non-null    int64  \n 9   fl            234 non-null    object \n 10  class         234 non-null    object \ndtypes: float64(1), int64(4), object(6)\nmemory usage: 20.2+ KB\n\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/hw1.html#p.130",
    "href": "posts/hw1/hw1.html#p.130",
    "title": "EasyPython Practice Ch4&5",
    "section": "p.130",
    "text": "p.130\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\nQ2. poptotal(전체인구) 변수를 total로 , popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total',\n                                    'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmidwest['asian_ratio'] = midwest['asian'] / midwest['total'] * 100\nsns.histplot(data = midwest, x = 'asian_ratio')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어보세요.\n\nimport numpy as np\nmean_asian = midwest['asian_ratio'].mean()\nmidwest['asian_scale'] = np.where(midwest['asian_ratio'] &gt; mean_asian, 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ratio\nasian_scale\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nQ5. 'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nplt.clf()\nfreq_asian_scale = midwest['asian_scale'].value_counts()\nprint(freq_asian_scale)\nfreq_asian_scale.plot.bar(rot = 0)\nplt.show()\n\nasian_scale\nsmall    318\nlarge    119\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/note/note.html",
    "href": "posts/note/note.html",
    "title": "LS Bigdata School note 1",
    "section": "",
    "text": "Python\n\nCtrl + Enter\nShift + 화살표: 블록\nShift + Alt + 아래화살표: 아래로 복사\nCtrl + Alt + 아래화살표: 커서 여러개\n\n\na = 1\na\n\n1\n\n\n\nls(dir): 파일 목록\ncd: 폴더 이동\n. 현재폴더\n.. 상위폴더\nShow folder in new window: 해당위치 탐색기\n앞에 조금 적고 Tab: 자동완성\ncls: 화면 정리\n\n\n\n변수에 값을 할당\n\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n\n\n\n리스트 만들기\n\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n\n\n\n\n변수 생성\n\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n\n8\n\n\n\n\n변수명 스타일\n\n스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n\n\n기본산술연산자\n\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n\n\n\n\n비교관련연산자\n\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a &lt; b)\nprint(a &gt; b)\nprint(a &gt;= b)\nprint(a &lt;= b)\n\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n연습문제 num1 num2 만들고 큰 수 구하기\n\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 &lt; num2) \n\nuser_age = 22\nis_adult = user_age &gt;= 18\nprint(\"성인입니까?\", is_adult)\n\nTrue\n성인입니까? True\n\n\n\n\nTrue나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n\n\n\n논리관련연산자 (Boolean)\n\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n\nFalse\nTrue\nFalse\n\n\n\n\nand 연산자\n\nTrue: 1 , False: 0\n\n\nprint(True + True) \nprint(True + False) \nprint(False + False) \n\n2\n1\n0\n\n\n\n\nand는 곱(*)으로 치환 가능\n\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n\n1\n0\n0\n\n\n\n\nor 연산자\n\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\nor은 덧셈(+)과 같음\n\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n\nTrue\n1\n\n\n\n\n복합대입연산자\n\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n\n2.0\n\n\n\n\n문자열 반복\n\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n\nRepeated string: Hello! Hello! Hello! \n\n\n\n\n\n정수: integer\n실수: float (double)\n\n\n\n단항 연산자\n\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n\n5\n-5\n-6\n\n\n\n\n비트 연산자\n\nbin()함수를 사용하면 정수의 이진수 표현을 반환함\nbin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n\n\n패키지 설치하기\n\nTerminal에서 설치하기\n느낌표(!) 뒤에 설치 코드 입력하기\n\n\n설치코드: pip install 패키지명\n\n\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd"
  },
  {
    "objectID": "posts/hw2/hw2.html",
    "href": "posts/hw2/hw2.html",
    "title": "EasyPython Practice Ch6",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보자 displ이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy 평균이 더 높은지 알아보세요\n\nimport pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보자. audi와 toyota 중 어느 manufacturer의 cty 평균이 더 높은지 알아보세요\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\nchevrolet, ford, honda 자동차의 고속도로 연비 평균을 알아보자. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해보세요.\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.144",
    "href": "posts/hw2/hw2.html#p.144",
    "title": "EasyPython Practice Ch6",
    "section": "",
    "text": "자동차 배기량에 따라 고속도로 연비가 다른지 알아보자 displ이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy 평균이 더 높은지 알아보세요\n\nimport pandas as pd\nimport numpy as np\n\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv\")\ndispl1 = mpg.query('displ &lt;= 4')\ndispl2 = mpg.query('displ &gt;= 5')\ndispl1['hwy'].mean().round(2)\ndispl2['hwy'].mean().round(2)\n\nnp.float64(18.08)\n\n\n\n\n\n자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보자. audi와 toyota 중 어느 manufacturer의 cty 평균이 더 높은지 알아보세요\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\naudi['cty'].mean().round(2)\ntoyota['cty'].mean().round(2)\n\nnp.float64(18.53)\n\n\n\n\n\nchevrolet, ford, honda 자동차의 고속도로 연비 평균을 알아보자. 세 회사의 데이터를 추출한 다음 hwy전체 평균을 구해보세요.\n\ncar3 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncar3['hwy'].mean().round(2)\n\nnp.float64(22.51)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.150",
    "href": "posts/hw2/hw2.html#p.150",
    "title": "EasyPython Practice Ch6",
    "section": "p.150",
    "text": "p.150\n\nQ1.\nmpg 데이터 중 일부만 추출해 분석에 활용하자. mpg 데이터에서 category, cty 변수를 추출해 새로운 데이터를 만들어라. 새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요.\n\ndf = mpg[['category','cty']]\ndf.head()\n\n\n\n\n\n\n\n\ncategory\ncty\n\n\n\n\n0\ncompact\n18\n\n\n1\ncompact\n21\n\n\n2\ncompact\n20\n\n\n3\ncompact\n21\n\n\n4\ncompact\n16\n\n\n\n\n\n\n\n\n\nQ2.\n자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다. 앞에서 추출한 데이터를 이용해 category가 suv인 자동차와 compact인 자동차 중 어떤 자동차의 cty 평균이 더 높은가.\n\ndf.query('category in [\"suv\", \"compact\"]') \\\n  .groupby('category') \\\n  .agg(cty_mean = (\"cty\", \"mean\")) \n\n\n\n\n\n\n\n\ncty_mean\n\n\ncategory\n\n\n\n\n\ncompact\n20.12766\n\n\nsuv\n13.50000"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.153",
    "href": "posts/hw2/hw2.html#p.153",
    "title": "EasyPython Practice Ch6",
    "section": "p.153",
    "text": "p.153\n\nQ1.\naudi에서 생산한 자동차 중에 어떤 자동차 모델의 hwy가 높은지 알아보자 audi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하라\n\nmpg.query(\"manufacturer == 'audi'\") \\\n    .sort_values('hwy', ascending = False) \\\n    .head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.158",
    "href": "posts/hw2/hw2.html#p.158",
    "title": "EasyPython Practice Ch6",
    "section": "p.158",
    "text": "p.158\n\nQ1.\nmpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하라.\n\nmpg2 = mpg.copy()\nmpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2.\n앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하라.\n\nmpg2 = mpg2.assign(mean = mpg2['total'] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\n\n\nQ3.\n’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하라\n\nmpg2.sort_values('mean')['model'].head()\n\n54       dakota pickup 4wd\n59             durango 4wd\n69     ram 1500 pickup 4wd\n65     ram 1500 pickup 4wd\n126     grand cherokee 4wd\nName: model, dtype: object\n\n\n\n\nQ4.\n1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보자. 데이터는 복사본 대신 mpg 원본을 이용하라.\n\nmpg.assign(total = mpg[\"cty\"] + mpg[\"cty\"],\n           total_mean = lambda x : x[\"total\"] / 2) \\\n   .sort_values('total_mean', ascending = False) \\\n   .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\ntotal_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n70\n35.0\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n66\n33.0\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n58\n29.0"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.166",
    "href": "posts/hw2/hw2.html#p.166",
    "title": "EasyPython Practice Ch6",
    "section": "P.166",
    "text": "P.166\n\nQ1.\nmpg 데이터의 category는 자동차를 특징에 따라 suv, compact 등 일곱 종류로 분류한 변수 어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. category별 cty 평균을 구해 보자.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean'))\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n0\n2seater\n15.400000\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n4\npickup\n13.000000\n\n\n5\nsubcompact\n20.371429\n\n\n6\nsuv\n13.500000\n\n\n\n\n\n\n\n\n\nQ2.\n앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있다. 어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하라.\n\nmpg.groupby(\"category\", as_index = False) \\\n   .agg(cty_mean = ('cty', 'mean')) \\\n   .sort_values('cty_mean', ascending = False)\n\n\n\n\n\n\n\n\ncategory\ncty_mean\n\n\n\n\n5\nsubcompact\n20.371429\n\n\n1\ncompact\n20.127660\n\n\n2\nmidsize\n18.756098\n\n\n3\nminivan\n15.818182\n\n\n0\n2seater\n15.400000\n\n\n6\nsuv\n13.500000\n\n\n4\npickup\n13.000000\n\n\n\n\n\n\n\n\n\nQ3.\n어떤 회사 자동차의 hwy가 가장 높은지 알아보려고 한다. hwy 평균이 가장 높은 회사 세 곳을 출력하세요.\n\nmpg.groupby('manufacturer', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean')) \\\n   .sort_values('mean_hwy', ascending = False)\\\n   .round(2) \\\n   .head(3)[['manufacturer']]\n\n\n\n\n\n\n\n\nmanufacturer\n\n\n\n\n4\nhonda\n\n\n14\nvolkswagen\n\n\n5\nhyundai\n\n\n\n\n\n\n\n\n\nQ4.\n어떤 회사에서 compact 차종을 가장 많이 생산하는지 알아보려고 한다. 회사별 compact차종 수를 내림차순으로 정렬해 출력하라.\n\nmpg.query('category == \"compact\"') \\\n   .groupby('manufacturer', as_index = False) \\\n   .agg(n = ('category', 'count')) \\\n   .sort_values('n', ascending = False)\n\n\n\n\n\n\n\n\nmanufacturer\nn\n\n\n\n\n0\naudi\n15\n\n\n4\nvolkswagen\n14\n\n\n3\ntoyota\n12\n\n\n2\nsubaru\n4\n\n\n1\nnissan\n2"
  },
  {
    "objectID": "posts/presentation/presentation.html",
    "href": "posts/presentation/presentation.html",
    "title": "LS Bigdata School Presentation 1",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.173",
    "href": "posts/hw2/hw2.html#p.173",
    "title": "EasyPython Practice Ch6",
    "section": "p.173",
    "text": "p.173\n문제 준비\n\nfuel = pd.DataFrame({'fl'       : ['c', 'd', 'e', 'p', 'r'],\n                     'price_fl' : [2.35, 2.38, 2.11, 2.76, 2.22]})\nfuel\n\n\n\n\n\n\n\n\nfl\nprice_fl\n\n\n\n\n0\nc\n2.35\n\n\n1\nd\n2.38\n\n\n2\ne\n2.11\n\n\n3\np\n2.76\n\n\n4\nr\n2.22\n\n\n\n\n\n\n\n\nQ1.\nmpg 데이터에는 연료 종류를 나타낸 f1 변수는 있지만 연료 가격을 나타낸 변수는 없다. 앞에서 만든 fuel데이터를 이용해 mpg 데이터에 price_f1 변수를 추가하라.\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv\")\nmpg = mpg.merge(fuel, how = \"left\", on = \"fl\")\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nprice_fl\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n2.76\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n2.76\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n2.76\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n2.76\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n2.76\n\n\n\n\n\n\n\n\n\nQ2.\n연료 가격 변수가 잘 추가됐는지 확인하기 위해 model, fl, price_fl 변수를 추출해 앞부분 5행을 출력하라.\n\nmpg[['model', 'fl', 'price_fl']].head()\n\n\n\n\n\n\n\n\nmodel\nfl\nprice_fl\n\n\n\n\n0\na4\np\n2.76\n\n\n1\na4\np\n2.76\n\n\n2\na4\np\n2.76\n\n\n3\na4\np\n2.76\n\n\n4\na4\np\n2.76"
  },
  {
    "objectID": "posts/hw2/hw2.html#p.176",
    "href": "posts/hw2/hw2.html#p.176",
    "title": "EasyPython Practice Ch6",
    "section": "p.176",
    "text": "p.176\n\n준비하기\n\nimport pandas as pd\nimport numpy as np\nmidwest = pd.read_csv(\"C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/midwest.csv\")\n\n\n\nQ1\npopadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다. midwest 데이터에 ‘전체 인구 대비 미성년 인구 백분율’ 변수를 추가하세요.\n\nmidwest['nonadult_ratio'] = (midwest['poptotal'] - midwest['popadults']) / midwest['poptotal'] * 100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nnonadult_ratio\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n34.486307\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n36.721250\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n35.501301\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n37.440758\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n31.819740\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n\nQ2.\n미성년 인구 백분율이 가장 높은 상위 5개 county의 미성년 인구 백분율을 출력하라.\n\nmidwest.sort_values('nonadult_ratio',ascending = False) \\\n       .head() \\\n       [['county', 'nonadult_ratio']]\n\n\n\n\n\n\n\n\ncounty\nnonadult_ratio\n\n\n\n\n230\nISABELLA\n51.501172\n\n\n404\nMENOMINEE\n50.591260\n\n\n281\nATHENS\n49.320727\n\n\n247\nMECOSTA\n49.059183\n\n\n154\nMONROE\n47.358182\n\n\n\n\n\n\n\n\n\nQ3.\n분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보자.\n\nmidwest['grade'] = np.where(midwest['nonadult_ratio'] &gt;= 40, 'large',\n                   np.where(midwest['nonadult_ratio'] &gt;= 30, 'middle', 'small'))\nmidwest.groupby('grade', as_index = False) \\\n       .agg(n = ('grade', 'count'))\n\n\n\n\n\n\n\n\ngrade\nn\n\n\n\n\n0\nlarge\n32\n\n\n1\nmiddle\n396\n\n\n2\nsmall\n9\n\n\n\n\n\n\n\n\n\nQ4.\npopasian은 해당 지역의 아시아인 인구를 나타냅니다. ‘전체 인구 대비 아시아인 인구 백분율’ 변수를 추가하고 하위 10개의 지역의 state, county, 아시아인 인구 백분율을 출력하라.\n\nmidwest['asian_ratio'] = midwest['popasian'] / midwest['poptotal'] * 100\nmidwest.sort_values('asian_ratio') \\\n       [['state', 'county', 'asian_ratio']] \\\n       .head(10)\n\n\n\n\n\n\n\n\nstate\ncounty\nasian_ratio\n\n\n\n\n404\nWI\nMENOMINEE\n0.000000\n\n\n105\nIN\nBENTON\n0.010592\n\n\n109\nIN\nCARROLL\n0.015950\n\n\n358\nOH\nVINTON\n0.027032\n\n\n390\nWI\nIRON\n0.032504\n\n\n85\nIL\nSCOTT\n0.053154\n\n\n112\nIN\nCLAY\n0.060716\n\n\n261\nMI\nOSCODA\n0.063759\n\n\n340\nOH\nPERRY\n0.066546\n\n\n73\nIL\nPIATT\n0.070749"
  }
]