{
  "hash": "a29b4484bde3346f385cecd99326b800",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"ISLP Lab: Introduction to Python\"\nauthor: Ahyeong Jeong\ndate: \"2024-07-25\"\ncategories: [ISLP]\n---\n\n## ISLP Lab: Introduction to Python\n\n#### Basic Commands\n__print()__\n\n::: {#2511e950 .cell execution_count=1}\n``` {.python .cell-code}\nprint('fit a model with', 11, 'variables')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfit a model with 11 variables\n```\n:::\n:::\n\n\n__list & concatenation__\n\n::: {#f3fdbca5 .cell execution_count=2}\n``` {.python .cell-code}\nx = [3, 4, 5]  # list\ny = [4, 9, 7]\nx + y # concatenation \n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[3, 4, 5, 4, 9, 7]\n```\n:::\n:::\n\n\n#### Introduction to Numerical Python\n__np.array(): function to define one-dimensinal arrays (vectors)__\n\n::: {#df7bb7f7 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nx = np.array([3, 4, 5])\ny = np.array([4, 9, 7])\nx + y\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([ 7, 13, 12])\n```\n:::\n:::\n\n\n__We can create a two-dimensional array as follows.__\n\n::: {#c2649905 .cell execution_count=4}\n``` {.python .cell-code}\nx = np.array([[1, 2], [3, 4]])\nx\nx.ndim\nx.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ndtype('int64')\n```\n:::\n:::\n\n\n__An array of floating point numbers__\n\n::: {#64269000 .cell execution_count=5}\n``` {.python .cell-code}\nnp.array([[1, 2], [3.0, 4]]).dtype\nnp.array([[1, 2], [3, 4]], float).dtype\nx.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(2, 2)\n```\n:::\n:::\n\n\n__A method is a function that is associated with an object.__\n__`x.sum()`: sums all of its elements.__\n__`np.sum()` function as well.__ \n\n::: {#34ef3bb9 .cell execution_count=6}\n``` {.python .cell-code}\nx = np.array([1, 2, 3, 4])\nx.sum()\nx = np.array([1, 2, 3, 4])\nnp.sum(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnp.int64(10)\n```\n:::\n:::\n\n\n__`reshape()` method: returns a new array with the same elements as x, but a different shape__\n\n::: {#049cfa72 .cell execution_count=7}\n``` {.python .cell-code}\nx = np.array([1, 2, 3, 4, 5, 6])\nprint('beginning x:\\n', x)\nx_reshape = x.reshape((2, 3))\nprint('reshaped x:\\n', x_reshape)\nx_reshape[0, 0]  # indexing 1\nx_reshape[1, 2]  # indexing 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbeginning x:\n [1 2 3 4 5 6]\nreshaped x:\n [[1 2 3]\n [4 5 6]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nnp.int64(6)\n```\n:::\n:::\n\n\n__\n\n::: {#7dc40c58 .cell execution_count=8}\n``` {.python .cell-code}\nprint('x before we modify x_reshape :\\n', x)\nprint('x_reshpae before we modify x_reshape:\\n', x_reshape)\nx_reshape[0, 0] = 5\nprint('x_reshape after we modify its top left element:\\n', x_reshape)\nprint('x after we modify top left element of x_reshape:\\n', x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx before we modify x_reshape :\n [1 2 3 4 5 6]\nx_reshpae before we modify x_reshape:\n [[1 2 3]\n [4 5 6]]\nx_reshape after we modify its top left element:\n [[5 2 3]\n [4 5 6]]\nx after we modify top left element of x_reshape:\n [5 2 3 4 5 6]\n```\n:::\n:::\n\n\n(a)\n\n::: {#fa41491d .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd \n#college = pd.read_csv(\"College.csv\")\n```\n:::\n\n\n(b)\n\n::: {#42e28b43 .cell execution_count=10}\n``` {.python .cell-code}\n#college2 = pd.read_csv('College.csv', index_col = 0)\n#college3 = college.rename({'Unnamed: 0': 'College'},\n#                            axis = 1 )\n#college3 = college3.set_index('college')\n```\n:::\n\n\n",
    "supporting": [
      "ISLP Ch2_files"
    ],
    "filters": [],
    "includes": {}
  }
}